/*
 * 作成したプログラムのアプリケーションを記述するためのファイル
 */

object plspSolver {
  def main(args: Array[String]): Unit = {

    val id: String = "199x125x" // 学籍番号を書く

    val fileName = args(0)

    println(s"ID: $id")
    println(s"CSP: $fileName")

    val csp = cspFactory.fromFile(fileName)

    println("c Parse Done.")

    val solver: CspSolver = new BT // new "自分ソルバークラス" を書く
    val solution = solver.solve(csp)
    if (solution.nonEmpty) {
      println("s SAT")
      printAssignment(solution.get)
    } else {
      println("s UNSAT")
    }

  }

  def printAssignment(a: Assignment) = {
    a.amap.map { case (x, v) => s"v ${x.name} = $v" }.foreach(println)
  }
}

object FileTest extends App {
  val csp = cspFactory.fromFile("CspFiles/Alldiff-NQueen04.csp")
  val solver = new BTwithAC(AC3)
  val solution = solver.solve(csp)
  if (solution.nonEmpty) {
    println("s SAT")
    println(solution.get)
  } else {
    println("s UNSAT")
  }
}

object FileTest1 extends App {
  val csp = cspFactory.fromFile("CspFiles/all.csp")
  val solver = new BT
  val solution = solver.solve(csp)
  if (solution.nonEmpty) {
    println("s SAT")
    println(solution.get)
  } else {
    println("s UNSAT")
  }
  println("Solution :")
}
object FileTest2 extends App {
  val csp = cspFactory.fromFile("CspFiles/NQueen04.csp")
  val solver = new BT
  val solution = solver.solve(csp)
  if (solution.nonEmpty) {
    println("s SAT")
    println("Solution :")
    println(solution.get)
  } else {
    println("s UNSAT")
  }
}
